/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.adduser.service.base;

import com.liferay.adduser.model.UserInfo;
import com.liferay.adduser.service.UserInfoLocalService;
import com.liferay.adduser.service.persistence.UserInfoPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user info local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.adduser.service.impl.UserInfoLocalServiceImpl}.
 * </p>
 *
 * @author phantoan
 * @see com.liferay.adduser.service.impl.UserInfoLocalServiceImpl
 * @see com.liferay.adduser.service.UserInfoLocalServiceUtil
 * @generated
 */
public abstract class UserInfoLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements UserInfoLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.adduser.service.UserInfoLocalServiceUtil} to access the user info local service.
	 */

	/**
	 * Adds the user info to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userInfo the user info
	 * @return the user info that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserInfo addUserInfo(UserInfo userInfo) throws SystemException {
		userInfo.setNew(true);

		return userInfoPersistence.update(userInfo);
	}

	/**
	 * Creates a new user info with the primary key. Does not add the user info to the database.
	 *
	 * @param code the primary key for the new user info
	 * @return the new user info
	 */
	@Override
	public UserInfo createUserInfo(String code) {
		return userInfoPersistence.create(code);
	}

	/**
	 * Deletes the user info with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param code the primary key of the user info
	 * @return the user info that was removed
	 * @throws PortalException if a user info with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserInfo deleteUserInfo(String code)
		throws PortalException, SystemException {
		return userInfoPersistence.remove(code);
	}

	/**
	 * Deletes the user info from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userInfo the user info
	 * @return the user info that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserInfo deleteUserInfo(UserInfo userInfo) throws SystemException {
		return userInfoPersistence.remove(userInfo);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserInfo.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return userInfoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adduser.model.impl.UserInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return userInfoPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adduser.model.impl.UserInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return userInfoPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return userInfoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return userInfoPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserInfo fetchUserInfo(String code) throws SystemException {
		return userInfoPersistence.fetchByPrimaryKey(code);
	}

	/**
	 * Returns the user info with the matching UUID and company.
	 *
	 * @param uuid the user info's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching user info, or <code>null</code> if a matching user info could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserInfo fetchUserInfoByUuidAndCompanyId(String uuid, long companyId)
		throws SystemException {
		return userInfoPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the user info matching the UUID and group.
	 *
	 * @param uuid the user info's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user info, or <code>null</code> if a matching user info could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserInfo fetchUserInfoByUuidAndGroupId(String uuid, long groupId)
		throws SystemException {
		return userInfoPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the user info with the primary key.
	 *
	 * @param code the primary key of the user info
	 * @return the user info
	 * @throws PortalException if a user info with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserInfo getUserInfo(String code)
		throws PortalException, SystemException {
		return userInfoPersistence.findByPrimaryKey(code);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return userInfoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the user info with the matching UUID and company.
	 *
	 * @param uuid the user info's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching user info
	 * @throws PortalException if a matching user info could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserInfo getUserInfoByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return userInfoPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the user info matching the UUID and group.
	 *
	 * @param uuid the user info's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user info
	 * @throws PortalException if a matching user info could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserInfo getUserInfoByUuidAndGroupId(String uuid, long groupId)
		throws PortalException, SystemException {
		return userInfoPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the user infos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.adduser.model.impl.UserInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user infos
	 * @param end the upper bound of the range of user infos (not inclusive)
	 * @return the range of user infos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<UserInfo> getUserInfos(int start, int end)
		throws SystemException {
		return userInfoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user infos.
	 *
	 * @return the number of user infos
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getUserInfosCount() throws SystemException {
		return userInfoPersistence.countAll();
	}

	/**
	 * Updates the user info in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userInfo the user info
	 * @return the user info that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserInfo updateUserInfo(UserInfo userInfo) throws SystemException {
		return userInfoPersistence.update(userInfo);
	}

	/**
	 * Returns the user info local service.
	 *
	 * @return the user info local service
	 */
	public com.liferay.adduser.service.UserInfoLocalService getUserInfoLocalService() {
		return userInfoLocalService;
	}

	/**
	 * Sets the user info local service.
	 *
	 * @param userInfoLocalService the user info local service
	 */
	public void setUserInfoLocalService(
		com.liferay.adduser.service.UserInfoLocalService userInfoLocalService) {
		this.userInfoLocalService = userInfoLocalService;
	}

	/**
	 * Returns the user info remote service.
	 *
	 * @return the user info remote service
	 */
	public com.liferay.adduser.service.UserInfoService getUserInfoService() {
		return userInfoService;
	}

	/**
	 * Sets the user info remote service.
	 *
	 * @param userInfoService the user info remote service
	 */
	public void setUserInfoService(
		com.liferay.adduser.service.UserInfoService userInfoService) {
		this.userInfoService = userInfoService;
	}

	/**
	 * Returns the user info persistence.
	 *
	 * @return the user info persistence
	 */
	public UserInfoPersistence getUserInfoPersistence() {
		return userInfoPersistence;
	}

	/**
	 * Sets the user info persistence.
	 *
	 * @param userInfoPersistence the user info persistence
	 */
	public void setUserInfoPersistence(UserInfoPersistence userInfoPersistence) {
		this.userInfoPersistence = userInfoPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.adduser.model.UserInfo",
			userInfoLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.adduser.model.UserInfo");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return UserInfo.class;
	}

	protected String getModelClassName() {
		return UserInfo.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = userInfoPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.adduser.service.UserInfoLocalService.class)
	protected com.liferay.adduser.service.UserInfoLocalService userInfoLocalService;
	@BeanReference(type = com.liferay.adduser.service.UserInfoService.class)
	protected com.liferay.adduser.service.UserInfoService userInfoService;
	@BeanReference(type = UserInfoPersistence.class)
	protected UserInfoPersistence userInfoPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private UserInfoLocalServiceClpInvoker _clpInvoker = new UserInfoLocalServiceClpInvoker();
}